name: Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker network
      run: docker network create FuzeInfra

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Pull and cache Docker images
      run: |
        # Database images
        docker pull postgres:15
        docker pull mongo:7
        docker pull redis:7-alpine
        docker pull neo4j:5
        docker pull docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        
        # Message queue images
        docker pull confluentinc/cp-zookeeper:7.4.0
        docker pull confluentinc/cp-kafka:7.4.0
        docker pull provectuslabs/kafka-ui:latest
        docker pull rabbitmq:3-management
        
        # Monitoring images
        docker pull prom/prometheus:latest
        docker pull prom/node-exporter:latest
        docker pull prom/alertmanager:latest
        docker pull grafana/grafana:latest
        docker pull grafana/loki:2.9.0
        docker pull grafana/promtail:2.9.0
        
        # Airflow images
        docker pull apache/airflow:2.7.0
        
        # Web interface images
        docker pull mongo-express:latest

    - name: Tag images for caching
      run: |
        # Tag images with registry prefix for caching
        docker tag postgres:15 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/postgres:15
        docker tag mongo:7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo:7
        docker tag redis:7-alpine ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/redis:7-alpine
        docker tag neo4j:5 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/neo4j:5
        docker tag docker.elastic.co/elasticsearch/elasticsearch:8.8.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/elasticsearch:8.8.0
        docker tag confluentinc/cp-zookeeper:7.4.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/zookeeper:7.4.0
        docker tag confluentinc/cp-kafka:7.4.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka:7.4.0
        docker tag provectuslabs/kafka-ui:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka-ui:latest
        docker tag rabbitmq:3-management ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rabbitmq:3-management
        docker tag prom/prometheus:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/prometheus:latest
        docker tag prom/node-exporter:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-exporter:latest
        docker tag prom/alertmanager:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alertmanager:latest
        docker tag grafana/grafana:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grafana:latest
        docker tag grafana/loki:2.9.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/loki:2.9.0
        docker tag grafana/promtail:2.9.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/promtail:2.9.0
        docker tag apache/airflow:2.7.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:2.7.0
        docker tag mongo-express:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo-express:latest

    - name: Push cached images to registry
      run: |
        # Push images to GitHub Container Registry for caching
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/postgres:15 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo:7 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/redis:7-alpine || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/neo4j:5 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/elasticsearch:8.8.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/zookeeper:7.4.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka:7.4.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka-ui:latest || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rabbitmq:3-management || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/prometheus:latest || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-exporter:latest || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alertmanager:latest || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grafana:latest || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/loki:2.9.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/promtail:2.9.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:2.7.0 || true
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo-express:latest || true

    - name: Create environment file
      run: |
        cp environment.template .env
        # Set secure passwords for testing
        sed -i 's/your_secure_postgres_password/test_postgres_pass/g' .env
        sed -i 's/your_secure_mongodb_password/test_mongo_pass/g' .env
        sed -i 's/your_secure_redis_password/test_redis_pass/g' .env
        sed -i 's/your_secure_neo4j_password/test_neo4j_pass/g' .env
        sed -i 's/your_secure_rabbitmq_password/test_rabbitmq_pass/g' .env
        sed -i 's/your_secure_grafana_password/test_grafana_pass/g' .env

    - name: Start infrastructure services
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml up -d
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
        # Check if critical services are running
        docker ps --format "table {{.Names}}\t{{.Status}}"
        
        # Wait for specific services to be healthy
        timeout 300 bash -c 'until docker exec shared-postgres pg_isready -U postgres; do sleep 5; done'
        timeout 300 bash -c 'until docker exec shared-redis redis-cli ping | grep PONG; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:9090/-/ready; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 5; done'

    - name: Run infrastructure tests
      run: |
        pytest tests/ -v --tb=short --color=yes
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Collect service logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Services ==="
        docker-compose -f docker-compose.FuzeInfra.yml ps
        
        echo "=== Service Logs ==="
        docker-compose -f docker-compose.FuzeInfra.yml logs --tail=50
        
        echo "=== Container Health ==="
        docker ps -a

    - name: Stop infrastructure services
      if: always()
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml down -v
        docker network rm FuzeInfra || true

  publish-test-results:
    needs: test-infrastructure
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results.xml
        comment_mode: create new
        check_name: "Infrastructure Test Results" 