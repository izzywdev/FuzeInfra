name: Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: izzywdev/fuzeinfra

# Add permissions for GitHub token to create check runs
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

jobs:
  test-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        df -h

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Verify Docker setup
      run: |
        docker --version
        docker info
        docker ps
        echo "Docker daemon is running and accessible"

    - name: Create Docker network
      run: docker network create FuzeInfra

    - name: Create environment file
      run: |
        cp environment.template .env
        python scripts-tools/setup_environment_ci.py

    - name: Start infrastructure services
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml up -d
      timeout-minutes: 10

    - name: Wait for services to be ready
      run: |
        echo "üöÄ Starting service readiness checks..."
        
        # Function to wait for container health
        wait_for_health() {
          local container=$1
          local max_attempts=30
          local attempt=1
          
          echo "‚è≥ Waiting for $container to be healthy..."
          while [ $attempt -le $max_attempts ]; do
            if docker inspect --format='{{.State.Health.Status}}' $container 2>/dev/null | grep -q "healthy"; then
              echo "‚úÖ $container is healthy"
              return 0
            fi
            echo "   Attempt $attempt/$max_attempts - waiting..."
            sleep 5
            ((attempt++))
          done
          echo "‚ùå $container failed to become healthy"
          return 1
        }
        
        # Function to wait for service port
        wait_for_port() {
          local service=$1
          local port=$2
          local max_attempts=30
          local attempt=1
          
          echo "‚è≥ Waiting for $service on port $port..."
          while [ $attempt -le $max_attempts ]; do
            if curl -f -s http://localhost:$port > /dev/null 2>&1; then
              echo "‚úÖ $service is responding on port $port"
              return 0
            fi
            echo "   Attempt $attempt/$max_attempts - waiting..."
            sleep 5
            ((attempt++))
          done
          echo "‚ùå $service failed to respond on port $port"
          return 1
        }
        
        # Function to wait for database connection
        wait_for_db() {
          local container=$1
          local command=$2
          local max_attempts=30
          local attempt=1
          
          echo "‚è≥ Waiting for database $container..."
          while [ $attempt -le $max_attempts ]; do
            if docker exec $container $command > /dev/null 2>&1; then
              echo "‚úÖ Database $container is ready"
              return 0
            fi
            echo "   Attempt $attempt/$max_attempts - waiting..."
            sleep 5
            ((attempt++))
          done
          echo "‚ùå Database $container failed to become ready"
          return 1
        }
        
        # Wait for services with health checks first
        echo "üìã Phase 1: Services with health checks"
        wait_for_health fuzeinfra-postgres || exit 1
        wait_for_health fuzeinfra-redis || exit 1
        
        # Wait for database services
        echo "üìã Phase 2: Database services"
        wait_for_db fuzeinfra-mongodb "mongosh --eval 'db.adminCommand(\"ping\")'" || exit 1
        
        # Wait for web services
        echo "üìã Phase 3: Web services"
        wait_for_port "Neo4j" 7474 || exit 1
        wait_for_port "Elasticsearch" 9200 || exit 1
        wait_for_port "Kafka UI" 8080 || exit 1
        wait_for_port "RabbitMQ Management" 15672 || exit 1
        wait_for_port "Prometheus" 9090 || exit 1
        wait_for_port "Grafana" 3001 || exit 1
        
        # Note: Airflow is tested separately in its own step due to longer startup time
        echo "üìã Phase 4: Core services ready!"
        echo "‚ÑπÔ∏è  Airflow will be tested separately (requires longer startup time)"
        
        echo "üéâ All core services are ready!"
        echo "üìä Final service status:"
        docker-compose -f docker-compose.FuzeInfra.yml ps

    - name: Test PostgreSQL
      run: |
        echo "Testing PostgreSQL connection..."
        docker exec fuzeinfra-postgres pg_isready -U postgres
        echo "‚úÖ PostgreSQL is ready"

    - name: Test Redis
      run: |
        echo "Testing Redis connection..."
        docker exec fuzeinfra-redis redis-cli ping
        echo "‚úÖ Redis is working"

    - name: Test MongoDB
      run: |
        echo "Testing MongoDB connection..."
        docker exec fuzeinfra-mongodb mongosh --eval "db.adminCommand('ping')"
        echo "‚úÖ MongoDB is working"

    - name: Test Neo4j
      run: |
        echo "Testing Neo4j connection..."
        timeout 30 bash -c 'until curl -f http://localhost:7474; do sleep 2; done'
        echo "‚úÖ Neo4j is accessible"

    - name: Test Elasticsearch
      run: |
        echo "Testing Elasticsearch connection..."
        timeout 30 bash -c 'until curl -f http://localhost:9200; do sleep 2; done'
        curl -X GET "localhost:9200/_cluster/health"
        echo "‚úÖ Elasticsearch is working"

    - name: Test Kafka
      run: |
        echo "Testing Kafka connection..."
        timeout 30 bash -c 'until curl -f http://localhost:8080; do sleep 2; done'
        echo "‚úÖ Kafka UI is accessible"

    - name: Test RabbitMQ
      run: |
        echo "Testing RabbitMQ connection..."
        timeout 30 bash -c 'until curl -f http://localhost:15672; do sleep 2; done'
        echo "‚úÖ RabbitMQ Management UI is accessible"

    - name: Test Prometheus
      run: |
        echo "Testing Prometheus connection..."
        timeout 30 bash -c 'until curl -f http://localhost:9090; do sleep 2; done'
        curl -X GET "http://localhost:9090/api/v1/query?query=up"
        echo "‚úÖ Prometheus is working"

    - name: Test Grafana
      run: |
        echo "Testing Grafana connection..."
        timeout 30 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'
        echo "‚úÖ Grafana is accessible"

    - name: Test Airflow
      run: |
        echo "Testing Airflow connection..."
        echo "‚è≥ Checking if airflow-init completed..."
        
        # Wait for airflow-init to complete (it should exit with code 0)
        max_init_wait=60
        init_wait=0
        while [ $init_wait -lt $max_init_wait ]; do
          if ! docker ps --filter "name=fuzeinfra-airflow-init" --filter "status=running" | grep -q fuzeinfra-airflow-init; then
            echo "‚úÖ Airflow initialization completed"
            break
          fi
          echo "   Waiting for airflow-init to complete... ($init_wait/$max_init_wait)"
          sleep 5
          ((init_wait+=5))
        done
        
        # Check airflow-init exit code
        init_exit_code=$(docker inspect fuzeinfra-airflow-init --format='{{.State.ExitCode}}' 2>/dev/null || echo "1")
        if [ "$init_exit_code" != "0" ]; then
          echo "‚ùå Airflow initialization failed with exit code: $init_exit_code"
          echo "=== Airflow Init Logs ==="
          docker logs fuzeinfra-airflow-init --tail=50
          exit 1
        fi
        
        echo "‚è≥ Waiting for Airflow webserver to start (this may take 2-3 minutes)..."
        timeout 180 bash -c 'until curl -f -s http://localhost:8082/health > /dev/null 2>&1; do 
          echo "   Still waiting for Airflow webserver..."
          sleep 10
        done'
        
        echo "‚úÖ Airflow webserver is accessible"
        
        # Additional verification
        echo "üîç Verifying Airflow services..."
        curl -s http://localhost:8082/health | head -5 || echo "Health endpoint not available, but service is responding"

    - name: Run comprehensive infrastructure tests
      run: |
        pytest tests/test_infrastructure_health.py -v --junitxml=test-results.xml
      continue-on-error: true

    - name: Run Airflow workflow tests
      run: |
        pytest tests/test_airflow_workflows.py -v --junitxml=airflow-test-results.xml
      continue-on-error: true

    - name: Collect service logs on failure
      if: failure()
      run: |
        echo "=== Docker System Info ==="
        docker info
        docker system df
        
        echo "=== Docker Compose Services ==="
        docker-compose -f docker-compose.FuzeInfra.yml ps
        
        echo "=== Service Logs ==="
        docker-compose -f docker-compose.FuzeInfra.yml logs --tail=50
        
        echo "=== Container Health ==="
        docker ps -a
        
        echo "=== Available Disk Space ==="
        df -h

    - name: Stop infrastructure services
      if: always()
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml down -v
        docker network rm FuzeInfra || true
        docker system prune -f

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results.xml
          airflow-test-results.xml
        comment_mode: off
        check_name: Infrastructure Test Results