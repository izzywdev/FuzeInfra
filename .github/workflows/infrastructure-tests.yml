name: Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: izzywdev/fuzeinfra

jobs:
  test-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker network
      run: docker network create FuzeInfra

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Pull and cache Docker images
      run: |
        # Pull all required images
        docker pull postgres:15
        docker pull mongo:7
        docker pull redis:7-alpine
        docker pull neo4j:5
        docker pull docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        docker pull confluentinc/cp-zookeeper:7.4.0
        docker pull confluentinc/cp-kafka:7.4.0
        docker pull provectuslabs/kafka-ui:latest
        docker pull rabbitmq:3-management
        docker pull prom/prometheus:latest
        docker pull prom/node-exporter:latest
        docker pull prom/alertmanager:latest
        docker pull grafana/grafana:latest
        docker pull grafana/loki:2.9.0
        docker pull grafana/promtail:2.9.0
        docker pull apache/airflow:2.7.0
        docker pull mongo-express:latest

    - name: Tag images for caching
      run: |
        # Tag images with registry prefix for caching
        docker tag postgres:15 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/postgres:15
        docker tag mongo:7 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo:7
        docker tag redis:7-alpine ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/redis:7-alpine
        docker tag neo4j:5 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/neo4j:5
        docker tag docker.elastic.co/elasticsearch/elasticsearch:8.8.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/elasticsearch:8.8.0
        docker tag confluentinc/cp-zookeeper:7.4.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/zookeeper:7.4.0
        docker tag confluentinc/cp-kafka:7.4.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka:7.4.0
        docker tag provectuslabs/kafka-ui:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka-ui:latest
        docker tag rabbitmq:3-management ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rabbitmq:3-management
        docker tag prom/prometheus:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/prometheus:latest
        docker tag prom/node-exporter:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-exporter:latest
        docker tag prom/alertmanager:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alertmanager:latest
        docker tag grafana/grafana:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grafana:latest
        docker tag grafana/loki:2.9.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/loki:2.9.0
        docker tag grafana/promtail:2.9.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/promtail:2.9.0
        docker tag apache/airflow:2.7.0 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:2.7.0
        docker tag mongo-express:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo-express:latest

    - name: Push cached images to registry
      run: |
        # Push tagged images to cache
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/postgres:15
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo:7
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/redis:7-alpine
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/neo4j:5
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/elasticsearch:8.8.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/zookeeper:7.4.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka:7.4.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/kafka-ui:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rabbitmq:3-management
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/prometheus:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-exporter:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/alertmanager:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grafana:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/loki:2.9.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/promtail:2.9.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airflow:2.7.0
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mongo-express:latest

    - name: Create environment file
      run: |
        # Create .env file non-interactively for CI
        cp environment.template .env
        # Replace placeholders with secure values for testing
        python -c "
import secrets, string, base64
def gen_pass(): return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(16))
def gen_key(): return base64.urlsafe_b64encode(secrets.token_bytes(32)).decode()
with open('.env', 'r') as f: content = f.read()
replacements = {
    'your_secure_postgres_password': gen_pass(),
    'your_secure_mongodb_password': gen_pass(),
    'your_secure_admin_ui_password': gen_pass(),
    'your_secure_redis_password': gen_pass(),
    'your_secure_neo4j_password': gen_pass(),
    'your_secure_rabbitmq_password': gen_pass(),
    'your_secure_grafana_password': gen_pass(),
    'your_secure_airflow_password': gen_pass(),
    'your_secure_fernet_key_here': gen_key(),
    'your_jwt_secret_key_here_change_in_production': secrets.token_urlsafe(32),
    'your_encryption_key_here_change_in_production': secrets.token_urlsafe(32)
}
for old, new in replacements.items(): content = content.replace(old, new)
with open('.env', 'w') as f: f.write(content)
print('âœ… Environment file configured for CI')
"

    - name: Start infrastructure services
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
        # Check if services are running
        docker-compose -f docker-compose.FuzeInfra.yml ps

    - name: Run infrastructure tests
      run: |
        pytest tests/ -v --junitxml=test-results.xml
      continue-on-error: true

    - name: Collect service logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Services ==="
        docker-compose -f docker-compose.FuzeInfra.yml ps
        
        echo "=== Service Logs ==="
        docker-compose -f docker-compose.FuzeInfra.yml logs --tail=50
        
        echo "=== Container Health ==="
        docker ps -a

    - name: Stop infrastructure services
      if: always()
      run: |
        docker-compose -f docker-compose.FuzeInfra.yml down -v
        docker network rm FuzeInfra || true

  publish-test-results:
    needs: test-infrastructure
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: test-results.xml
        comment_mode: off
        check_name: Infrastructure Test Results
        github_token: ${{ secrets.GITHUB_TOKEN }} 