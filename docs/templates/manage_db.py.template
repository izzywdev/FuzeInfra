#!/usr/bin/env python3
"""
Database Management Script Template
Handles Alembic migrations and database operations for your application

USAGE:
1. Copy this file to your project's scripts directory
2. Ensure you have alembic.ini configured for your project
3. Update database connection settings for your application
4. Install required dependencies: pip install alembic sqlalchemy psycopg2-binary
"""

import os
import sys
import argparse
from alembic.config import Config
from alembic import command
from sqlalchemy import create_engine, text
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_database_url():
    """Get database URL from environment variables."""
    # Update these environment variable names for your application
    postgres_url = os.getenv('DATABASE_URL')  # or your app's specific env var
    if postgres_url:
        return postgres_url
    
    # Fallback to individual components - customize for your app
    host = os.getenv('DB_HOST', 'localhost')
    port = os.getenv('DB_PORT', '5432')
    db = os.getenv('DB_NAME', 'your_app_db')  # Change this
    user = os.getenv('DB_USER', 'your_app_user')  # Change this
    password = os.getenv('DB_PASSWORD', 'your_password')  # Change this
    
    return f"postgresql://{user}:{password}@{host}:{port}/{db}"


def get_alembic_config():
    """Get Alembic configuration."""
    # Ensure alembic.ini exists in your project root
    alembic_cfg = Config("alembic.ini")
    alembic_cfg.set_main_option("sqlalchemy.url", get_database_url())
    return alembic_cfg


def init_database():
    """Initialize the database with Alembic."""
    logger.info("Initializing database with Alembic migrations...")
    
    try:
        alembic_cfg = get_alembic_config()
        
        # Check if alembic_version table exists
        engine = create_engine(get_database_url())
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'alembic_version'
                );
            """))
            
            table_exists = result.scalar()
            
            if not table_exists:
                logger.info("Creating Alembic version table...")
                command.stamp(alembic_cfg, "head")
            else:
                logger.info("Alembic version table already exists")
                
        logger.info("Database initialization completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
        return False


def run_migrations():
    """Run all pending migrations."""
    logger.info("Running database migrations...")
    
    try:
        alembic_cfg = get_alembic_config()
        command.upgrade(alembic_cfg, "head")
        logger.info("Migrations completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Failed to run migrations: {e}")
        return False


def create_migration(message):
    """Create a new migration."""
    logger.info(f"Creating new migration: {message}")
    
    try:
        alembic_cfg = get_alembic_config()
        command.revision(alembic_cfg, message=message, autogenerate=True)
        logger.info("Migration created successfully")
        return True
        
    except Exception as e:
        logger.error(f"Failed to create migration: {e}")
        return False


def show_current_revision():
    """Show current database revision."""
    try:
        alembic_cfg = get_alembic_config()
        command.current(alembic_cfg)
        return True
        
    except Exception as e:
        logger.error(f"Failed to show current revision: {e}")
        return False


def show_migration_history():
    """Show migration history."""
    try:
        alembic_cfg = get_alembic_config()
        command.history(alembic_cfg)
        return True
        
    except Exception as e:
        logger.error(f"Failed to show migration history: {e}")
        return False


def reset_database():
    """Reset database to clean state."""
    logger.warning("Resetting database - this will drop all tables!")
    
    try:
        alembic_cfg = get_alembic_config()
        
        # Downgrade to base (removes all tables)
        command.downgrade(alembic_cfg, "base")
        
        # Upgrade to head (recreates all tables)
        command.upgrade(alembic_cfg, "head")
        
        logger.info("Database reset completed successfully")
        return True
        
    except Exception as e:
        logger.error(f"Failed to reset database: {e}")
        return False


def check_database_connection():
    """Check if database connection is working."""
    logger.info("Checking database connection...")
    
    try:
        engine = create_engine(get_database_url())
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            if result.scalar() == 1:
                logger.info("Database connection successful")
                return True
            else:
                logger.error("Database connection test failed")
                return False
                
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="Database Management for Your Application")
    parser.add_argument('command', choices=[
        'init', 'migrate', 'create', 'current', 'history', 'reset', 'check'
    ], help='Database command to execute')
    parser.add_argument('--message', '-m', help='Migration message (for create command)')
    
    args = parser.parse_args()
    
    if args.command == 'init':
        success = init_database()
    elif args.command == 'migrate':
        success = run_migrations()
    elif args.command == 'create':
        if not args.message:
            logger.error("Migration message is required for create command")
            sys.exit(1)
        success = create_migration(args.message)
    elif args.command == 'current':
        success = show_current_revision()
    elif args.command == 'history':
        success = show_migration_history()
    elif args.command == 'reset':
        success = reset_database()
    elif args.command == 'check':
        success = check_database_connection()
    else:
        logger.error(f"Unknown command: {args.command}")
        sys.exit(1)
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    main() 